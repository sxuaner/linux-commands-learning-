# Global regular expression print

#Options
 -o, --only-matching
Prints only the matching part of the lines.

-l, --files-with-matches
Only the names of files containing selected lines are written to standard output.  grep will only search a file until a match has been found, making 
searches potentially less expensive.  Pathnames are listed once per file searched.  
If the standard input is searched, the string ``(standard input)'' is written.

-i, --ignore-case
Perform case insensitive matching.  By default, grep is case sensitive.

-R, -r, --recursive
Recursively search subdirectories listed.

-q, --quiet, --silent
Quiet mode: suppress normal output.  grep will only search a file until a match has been found, making searches potentially less expensive.

-F, --fixed-strings
Interpret pattern as a set of fixed strings (i.e. force grep to behave as fgrep).

-f file, --file=file
Read one or more newline separated patterns from file.  Empty pattern lines match every input line.  Newlines are not considered part of a pattern.  If file is empty,
nothing is matched.

-exec   If the string ``{}'' appears anywhere in the utility name or the arguments it is replaced by the pathname of the current file.  
        The expression must be terminated by a semi-colon (``;'').  If you invoke find from a shell you may need to quote the semicolon if the shell
        would otherwise treat it as a control operator.

# Type of Regex
Three types of regex
The grep understands three different types of regular expression syntax as follows:
basic (BRE)
extended (ERE)
perl (PCRE)


#Examples:
!Get path to blueutil
which blueutil | grep -o '/usr.*' | uniq 

!To find the files that match certain patter in specified location and its subdirectories and print the source.
$ grep -lir <Regex> <path to search>
e.g: grep -lir mp3 ./

! Find content and execute utility
find <dir(file)-to-search> -type f -exec grep -qiF 'string' {} \; -exec mv {} /path/to/dest \;

!Display llines containing new or deleted
git status | grep 'new\|deleted'


